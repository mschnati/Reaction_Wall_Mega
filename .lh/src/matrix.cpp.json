{
    "sourceFile": "src/matrix.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1740852013609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740852069644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n  *     -         -\r\n  *   [0][0] - [0][15]\r\n  */\r\n void ledsToMatrix() {\r\n-    for (int i = 0; i < 16; i++) {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n         for (int j = 0; j < 16; j++) {\r\n         if (i % 2 == 0) {\r\n             LEDMatrix[i][j] = i * 16 + j;\r\n         } else {\r\n"
                },
                {
                    "date": 1740852076132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * 16 + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a digit on the LED matrix.\r\n+ * @param digit The digit to display (0-9).\r\n+ * @param xOffset The x offset to start displaying the digit.\r\n+ * @param yOffset The y offset to start displaying the digit.\r\n+ * Offset is the top left corner of the digit.\r\n+ * @param color The color to display the digit.\r\n+ */\r\n+void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n+    if (digit < 0 || digit > 9) return;\r\n+    \r\n+    for (int row = 0; row < 5; row++) {\r\n+        for (int col = 0; col < 3; col++) {\r\n+            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n+            } else {\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n+            }\r\n+        }\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of a 3x3 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740852104858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a digit on the LED matrix.\r\n+ * @param digit The digit to display (0-9).\r\n+ * @param xOffset The x offset to start displaying the digit.\r\n+ * @param yOffset The y offset to start displaying the digit.\r\n+ * Offset is the top left corner of the digit.\r\n+ * @param color The color to display the digit.\r\n+ */\r\n+void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n+    if (digit < 0 || digit > 9) return;\r\n+    \r\n+    for (int row = 0; row < 5; row++) {\r\n+        for (int col = 0; col < 3; col++) {\r\n+            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n+            } else {\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n+            }\r\n+        }\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of a 3x3 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740852115996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_COLS + () - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a digit on the LED matrix.\r\n+ * @param digit The digit to display (0-9).\r\n+ * @param xOffset The x offset to start displaying the digit.\r\n+ * @param yOffset The y offset to start displaying the digit.\r\n+ * Offset is the top left corner of the digit.\r\n+ * @param color The color to display the digit.\r\n+ */\r\n+void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n+    if (digit < 0 || digit > 9) return;\r\n+    \r\n+    for (int row = 0; row < 5; row++) {\r\n+        for (int col = 0; col < 3; col++) {\r\n+            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n+            } else {\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n+            }\r\n+        }\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of a 3x3 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740852127198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         for (int j = 0; j < LED_COLS; j++) {\r\n         if (i % 2 == 0) {\r\n             LEDMatrix[i][j] = i * LED_ROWS + j;\r\n         } else {\r\n-            LEDMatrix[i][j] = i * LED_COLS + () - j;\r\n+            LEDMatrix[i][j] = i * LED_COLS + (LED_ROWS - 1) - j;\r\n         }\r\n         }\r\n     }\r\n }\r\n@@ -83,266 +83,5 @@\n         for (int j = 0; j < 4; j++) {\r\n             leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a digit on the LED matrix.\r\n- * @param digit The digit to display (0-9).\r\n- * @param xOffset The x offset to start displaying the digit.\r\n- * @param yOffset The y offset to start displaying the digit.\r\n- * Offset is the top left corner of the digit.\r\n- * @param color The color to display the digit.\r\n- */\r\n-void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n-    if (digit < 0 || digit > 9) return;\r\n-    \r\n-    for (int row = 0; row < 5; row++) {\r\n-        for (int col = 0; col < 3; col++) {\r\n-            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n-            } else {\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n-            }\r\n-        }\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * 16 + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a digit on the LED matrix.\r\n- * @param digit The digit to display (0-9).\r\n- * @param xOffset The x offset to start displaying the digit.\r\n- * @param yOffset The y offset to start displaying the digit.\r\n- * Offset is the top left corner of the digit.\r\n- * @param color The color to display the digit.\r\n- */\r\n-void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n-    if (digit < 0 || digit > 9) return;\r\n-    \r\n-    for (int row = 0; row < 5; row++) {\r\n-        for (int col = 0; col < 3; col++) {\r\n-            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n-            } else {\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n-            }\r\n-        }\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < 16; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * 16 + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a digit on the LED matrix.\r\n- * @param digit The digit to display (0-9).\r\n- * @param xOffset The x offset to start displaying the digit.\r\n- * @param yOffset The y offset to start displaying the digit.\r\n- * Offset is the top left corner of the digit.\r\n- * @param color The color to display the digit.\r\n- */\r\n-void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n-    if (digit < 0 || digit > 9) return;\r\n-    \r\n-    for (int row = 0; row < 5; row++) {\r\n-        for (int col = 0; col < 3; col++) {\r\n-            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n-            } else {\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n-            }\r\n-        }\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740852136551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a digit on the LED matrix.\r\n+ * @param digit The digit to display (0-9).\r\n+ * @param xOffset The x offset to start displaying the digit.\r\n+ * @param yOffset The y offset to start displaying the digit.\r\n+ * Offset is the top left corner of the digit.\r\n+ * @param color The color to display the digit.\r\n+ */\r\n+void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n+    if (digit < 0 || digit > 9) return;\r\n+    \r\n+    for (int row = 0; row < 5; row++) {\r\n+        for (int col = 0; col < 3; col++) {\r\n+            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n+            } else {\r\n+                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n+            }\r\n+        }\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of a 3x3 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740852698900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of a 3x3 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854634872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     FastLED.show();\r\n }\r\n \r\n /** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n+ * Set the color of the \r\n  * @param x The x coordinate of the block (0-2).\r\n  * @param y The y coordinate of the block (0-2).\r\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n@@ -60,179 +60,5 @@\n         for (int j = 0; j < 4; j++) {\r\n             leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a digit on the LED matrix.\r\n- * @param digit The digit to display (0-9).\r\n- * @param xOffset The x offset to start displaying the digit.\r\n- * @param yOffset The y offset to start displaying the digit.\r\n- * Offset is the top left corner of the digit.\r\n- * @param color The color to display the digit.\r\n- */\r\n-void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n-    if (digit < 0 || digit > 9) return;\r\n-    \r\n-    for (int row = 0; row < 5; row++) {\r\n-        for (int col = 0; col < 3; col++) {\r\n-            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n-            } else {\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n-            }\r\n-        }\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * LED_COLS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a digit on the LED matrix.\r\n- * @param digit The digit to display (0-9).\r\n- * @param xOffset The x offset to start displaying the digit.\r\n- * @param yOffset The y offset to start displaying the digit.\r\n- * Offset is the top left corner of the digit.\r\n- * @param color The color to display the digit.\r\n- */\r\n-void display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n-    if (digit < 0 || digit > 9) return;\r\n-    \r\n-    for (int row = 0; row < 5; row++) {\r\n-        for (int col = 0; col < 3; col++) {\r\n-            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n-            } else {\r\n-                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n-            }\r\n-        }\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of a 3x3 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854645362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. E\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854650843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 \r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 5; i++) {\r\n+        for (int j = 0; j < 5; j++) {\r\n+            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854670339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int LEDMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void ledsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            LEDMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the block (0-2).\r\n+ * @param y The y coordinate of the block (0-2).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    \r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854676031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n  * @param x The x coordinate of the block (0-2).\r\n  * @param y The y coordinate of the block (0-2).\r\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n-    \r\n+    int button \r\n }\r\n \r\n /**\r\n  * Set the color of a 4x4 block on the LED matrix.\r\n@@ -56,197 +56,5 @@\n         for (int j = 0; j < 4; j++) {\r\n             leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 \r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. E\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void ledsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the \r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 5; i++) {\r\n-        for (int j = 0; j < 5; j++) {\r\n-            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854691425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n }\r\n \r\n /** \r\n  * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the block (0-2).\r\n- * @param y The y coordinate of the block (0-2).\r\n+ * @param x The x coordinate of the button (0-2).\r\n+ * @param y The y coordinate of the button (0-2).\r\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n     int button \r\n }\r\n"
                },
                {
                    "date": 1740854738316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include \"globals.h\"\r\n \r\n CRGB leds[NUM_LEDS];\r\n-int LEDMatrix[LED_ROWS][LED_COLS];\r\n+int ButtonMatrix[LED_ROWS][LED_COLS];\r\n \r\n /** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n  *  [15][0] - [15][15]\r\n  *     -         -\r\n@@ -11,11 +11,11 @@\n void ledsToMatrix() {\r\n     for (int i = 0; i < LED_ROWS; i++) {\r\n         for (int j = 0; j < LED_COLS; j++) {\r\n         if (i % 2 == 0) {\r\n-            LEDMatrix[i][j] = i * LED_COLS + j;\r\n+            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n         } else {\r\n-            LEDMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n         }\r\n         }\r\n     }\r\n }\r\n@@ -53,8 +53,8 @@\n  */\r\n void setBlockColor_4(int x, int y, CRGB color) {\r\n     for (int i = 0; i < 4; i++) {\r\n         for (int j = 0; j < 4; j++) {\r\n-            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854762360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n  *  [15][0] - [15][15]\r\n  *     -         -\r\n  *   [0][0] - [0][15]\r\n  */\r\n-void ledsToMatrix() {\r\n+void buttonsToMatrix() {\r\n     for (int i = 0; i < LED_ROWS; i++) {\r\n         for (int j = 0; j < LED_COLS; j++) {\r\n         if (i % 2 == 0) {\r\n             ButtonMatrix[i][j] = i * LED_COLS + j;\r\n@@ -38,10 +38,10 @@\n }\r\n \r\n /** \r\n  * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-2).\r\n- * @param y The y coordinate of the button (0-2).\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n     int button \r\n }\r\n"
                },
                {
                    "date": 1740854778424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n  * @param x The x coordinate of the button (0-5).\r\n  * @param y The y coordinate of the button (0-5).\r\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n-    int button \r\n+    int button bu\r\n }\r\n \r\n /**\r\n  * Set the color of a 4x4 block on the LED matrix.\r\n"
                },
                {
                    "date": 1740854795780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][15]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = \r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854819453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [15][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][6]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button + i] = color;\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854827104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [15][15]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+        if (i % 2 == 0) {\r\n+            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n+        } else {\r\n+            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+        }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button + i] = color;\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740854931332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[LED_ROWS][LED_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [5][5]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < LED_ROWS; i++) {\r\n+        for (int j = 0; j < LED_COLS; j++) {\r\n+            if (i % 2 == 0) {\r\n+                ButtonMatrix[i][j] = i * LED_COLS + j;\r\n+            } else {\r\n+                ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Display a score on the LED matrix.\r\n+ * @param score The score to display.\r\n+ * @param color The color to display the score.\r\n+ */\r\n+void display_score(int score, CRGB color) {\r\n+    FastLED.clear();\r\n+    \r\n+    if (score >= 10) {\r\n+        display_digit(score / 10, 6, 4, color);  // Left digit\r\n+        display_digit(score % 10, 6, 8, color);  // Right digit\r\n+    } else {\r\n+        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n+    }\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button + i] = color;\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740855355476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n #include \"globals.h\"\r\n \r\n CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[LED_ROWS][LED_COLS];\r\n+int ButtonMatrix[BUTTON_ROWS][LED_COLS];\r\n \r\n /** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n  *  [5][0] - [5][5]\r\n  *     -         -\r\n  *   [0][0] - [0][5]\r\n  */\r\n void buttonsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n+    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n         for (int j = 0; j < LED_COLS; j++) {\r\n             if (i % 2 == 0) {\r\n                 ButtonMatrix[i][j] = i * LED_COLS + j;\r\n             } else {\r\n-                ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n+                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n             }\r\n         }\r\n     }\r\n }\r\n@@ -59,251 +59,5 @@\n         for (int j = 0; j < 4; j++) {\r\n             leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [5][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][5]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button + i] = color;\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][6]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button + i] = color;\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button = \r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[LED_ROWS][LED_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [15][0] - [15][15]\r\n- *     -         -\r\n- *   [0][0] - [0][15]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < LED_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n-        if (i % 2 == 0) {\r\n-            ButtonMatrix[i][j] = i * LED_COLS + j;\r\n-        } else {\r\n-            ButtonMatrix[i][j] = i * LED_ROWS + (LED_ROWS - 1) - j;\r\n-        }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button bu\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740855384928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,19 @@\n #include \"globals.h\"\r\n \r\n CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[BUTTON_ROWS][LED_COLS];\r\n+int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n \r\n /** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n  *  [5][0] - [5][5]\r\n  *     -         -\r\n  *   [0][0] - [0][5]\r\n  */\r\n void buttonsToMatrix() {\r\n     for (int i = 0; i < BUTTON_ROWS; i++) {\r\n-        for (int j = 0; j < LED_COLS; j++) {\r\n+        for (int j = 0; j < BUTTON_COLS; j++) {\r\n             if (i % 2 == 0) {\r\n-                ButtonMatrix[i][j] = i * LED_COLS + j;\r\n+                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n             } else {\r\n                 ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n             }\r\n         }\r\n"
                },
                {
                    "date": 1740856206656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,25 +19,8 @@\n         }\r\n     }\r\n }\r\n \r\n-/**\r\n- * Display a score on the LED matrix.\r\n- * @param score The score to display.\r\n- * @param color The color to display the score.\r\n- */\r\n-void display_score(int score, CRGB color) {\r\n-    FastLED.clear();\r\n-    \r\n-    if (score >= 10) {\r\n-        display_digit(score / 10, 6, 4, color);  // Left digit\r\n-        display_digit(score % 10, 6, 8, color);  // Right digit\r\n-    } else {\r\n-        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n-    }\r\n-    FastLED.show();\r\n-}\r\n-\r\n /** \r\n  * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n  * @param x The x coordinate of the button (0-5).\r\n  * @param y The y coordinate of the button (0-5).\r\n"
                },
                {
                    "date": 1740857352748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n  */\r\n void setButtonColor(int x, int y, CRGB color) {\r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n-        leds[button + i] = color;\r\n+        leds[button * 6 + i] = color;\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1740904494352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [5][5]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n+        for (int j = 0; j < BUTTON_COLS; j++) {\r\n+            if (i % 2 == 0) {\r\n+                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n+            } else {\r\n+                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = color;\r\n+    }\r\n+}\r\n+\r\n+void rainbowButton\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740906298516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,53 +31,13 @@\n         leds[button * 6 + i] = color;\r\n     }\r\n }\r\n \r\n-void rainbowButton\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [5][0] - [5][5]\r\n- *     -         -\r\n- *   [0][0] - [0][5]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n-        for (int j = 0; j < BUTTON_COLS; j++) {\r\n-            if (i % 2 == 0) {\r\n-                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n-            } else {\r\n-                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n+void rainbowButton(int x, int y) {\r\n+    static \r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = color;\r\n+        leds[button * 6 + i] = CHSV(i * 255 / 6, 255, 255);\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1740906320827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [5][5]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n+        for (int j = 0; j < BUTTON_COLS; j++) {\r\n+            if (i % 2 == 0) {\r\n+                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n+            } else {\r\n+                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = color;\r\n+    }\r\n+}\r\n+\r\n+void rainbowButton(int x, int y) {\r\n+    static uint8_t offset = 0;\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = CHSV(i * 255 / 6 + offset, 255, 255);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740906329573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [5][5]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n+        for (int j = 0; j < BUTTON_COLS; j++) {\r\n+            if (i % 2 == 0) {\r\n+                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n+            } else {\r\n+                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = color;\r\n+    }\r\n+}\r\n+\r\n+void rainbowButton(int x, int y) {\r\n+    static uint8_t offset = 0;\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] =CHSV((i * 255 / 6 + offset) % 255, 255, 255);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740906357776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n     }\r\n }\r\n \r\n void rainbowButton(int x, int y) {\r\n-    static uint8_t offset = 0;\r\n+    static uint8_t hueoffset = 0;\r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] =CHSV((i * 255 / 6 + offset) % 255, 255, 255);\r\n+        leds[button * 6 + i] = CHSV((i * 255 / 6 + offset) % 255, 255, 255);\r\n     }\r\n }\r\n \r\n /**\r\n@@ -50,113 +50,5 @@\n         for (int j = 0; j < 4; j++) {\r\n             leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n         }\r\n     }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [5][0] - [5][5]\r\n- *     -         -\r\n- *   [0][0] - [0][5]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n-        for (int j = 0; j < BUTTON_COLS; j++) {\r\n-            if (i % 2 == 0) {\r\n-                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n-            } else {\r\n-                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = color;\r\n-    }\r\n-}\r\n-\r\n-void rainbowButton(int x, int y) {\r\n-    static uint8_t offset = 0;\r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = CHSV(i * 255 / 6 + offset, 255, 255);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n-}\n-#include \"globals.h\"\r\n-\r\n-CRGB leds[NUM_LEDS];\r\n-int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n-\r\n-/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n- *  [5][0] - [5][5]\r\n- *     -         -\r\n- *   [0][0] - [0][5]\r\n- */\r\n-void buttonsToMatrix() {\r\n-    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n-        for (int j = 0; j < BUTTON_COLS; j++) {\r\n-            if (i % 2 == 0) {\r\n-                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n-            } else {\r\n-                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/** \r\n- * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n- * @param x The x coordinate of the button (0-5).\r\n- * @param y The y coordinate of the button (0-5).\r\n- */\r\n-void setButtonColor(int x, int y, CRGB color) {\r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = color;\r\n-    }\r\n-}\r\n-\r\n-void rainbowButton(int x, int y) {\r\n-    static \r\n-    int button = ButtonMatrix[x][y];\r\n-    for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = CHSV(i * 255 / 6, 255, 255);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Set the color of a 4x4 block on the LED matrix.\r\n- * @param x The x coordinate of the block (0-3).\r\n- * @param y The y coordinate of the block (0-3).\r\n- */\r\n-void setBlockColor_4(int x, int y, CRGB color) {\r\n-    for (int i = 0; i < 4; i++) {\r\n-        for (int j = 0; j < 4; j++) {\r\n-            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n-        }\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740906363429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n     }\r\n }\r\n \r\n void rainbowButton(int x, int y) {\r\n-    static uint8_t hueoffset = 0;\r\n+    static uint8_t hue_offset = 0;\r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = CHSV((i * 255 / 6 + offset) % 255, 255, 255);\r\n+        leds[button * 6 + i] = CHSV((i * 255 / 6 + hoffset) % 255, 255, 255);\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1740906377861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,11 @@\n void rainbowButton(int x, int y) {\r\n     static uint8_t hue_offset = 0;\r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n-        leds[button * 6 + i] = CHSV((i * 255 / 6 + hoffset) % 255, 255, 255);\r\n+        leds[button * 6 + i] = CHSV((i * 255 / 6 + hue_offset) % 255, 255, 255);\r\n     }\r\n+    \r\n }\r\n \r\n /**\r\n  * Set the color of a 4x4 block on the LED matrix.\r\n"
                },
                {
                    "date": 1741198374384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,15 +31,17 @@\n         leds[button * 6 + i] = color;\r\n     }\r\n }\r\n \r\n+\r\n+\r\n void rainbowButton(int x, int y) {\r\n     static uint8_t hue_offset = 0;\r\n     int button = ButtonMatrix[x][y];\r\n     for (int i = 0; i < 6; i++) {\r\n         leds[button * 6 + i] = CHSV((i * 255 / 6 + hue_offset) % 255, 255, 255);\r\n     }\r\n-    \r\n+    hue_offset += 1;\r\n }\r\n \r\n /**\r\n  * Set the color of a 4x4 block on the LED matrix.\r\n"
                },
                {
                    "date": 1741198397681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+#include \"globals.h\"\r\n+\r\n+CRGB leds[NUM_LEDS];\r\n+int ButtonMatrix[BUTTON_ROWS][BUTTON_COLS];\r\n+\r\n+/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n+ *  [5][0] - [5][5]\r\n+ *     -         -\r\n+ *   [0][0] - [0][5]\r\n+ */\r\n+void buttonsToMatrix() {\r\n+    for (int i = 0; i < BUTTON_ROWS; i++) {\r\n+        for (int j = 0; j < BUTTON_COLS; j++) {\r\n+            if (i % 2 == 0) {\r\n+                ButtonMatrix[i][j] = i * BUTTON_COLS + j;\r\n+            } else {\r\n+                ButtonMatrix[i][j] = i * BUTTON_ROWS + (BUTTON_ROWS - 1) - j;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+/** \r\n+ * Set the color of the button at the given coordinates. Each button is 6 LEDs long\r\n+ * @param x The x coordinate of the button (0-5).\r\n+ * @param y The y coordinate of the button (0-5).\r\n+ */\r\n+void setButtonColor(int x, int y, CRGB color) {\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = color;\r\n+    }\r\n+}\r\n+\r\n+void setButtonColorMixed(int x, int y, CRGB )\r\n+\r\n+void rainbowButton(int x, int y) {\r\n+    static uint8_t hue_offset = 0;\r\n+    int button = ButtonMatrix[x][y];\r\n+    for (int i = 0; i < 6; i++) {\r\n+        leds[button * 6 + i] = CHSV((i * 255 / 6 + hue_offset) % 255, 255, 255);\r\n+    }\r\n+    hue_offset += 1;\r\n+}\r\n+\r\n+/**\r\n+ * Set the color of a 4x4 block on the LED matrix.\r\n+ * @param x The x coordinate of the block (0-3).\r\n+ * @param y The y coordinate of the block (0-3).\r\n+ */\r\n+void setBlockColor_4(int x, int y, CRGB color) {\r\n+    for (int i = 0; i < 4; i++) {\r\n+        for (int j = 0; j < 4; j++) {\r\n+            leds[ButtonMatrix[x * 4 + i][y * 4 + j]] = color;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740852013609,
            "name": "Commit-0",
            "content": "#include \"globals.h\"\r\n\r\nCRGB leds[NUM_LEDS];\r\nint LEDMatrix[LED_ROWS][LED_COLS];\r\n\r\n/** convert leds array to 16x16 matrix. [0][0] is bottom left corner\r\n *  [15][0] - [15][15]\r\n *     -         -\r\n *   [0][0] - [0][15]\r\n */\r\nvoid ledsToMatrix() {\r\n    for (int i = 0; i < 16; i++) {\r\n        for (int j = 0; j < 16; j++) {\r\n        if (i % 2 == 0) {\r\n            LEDMatrix[i][j] = i * 16 + j;\r\n        } else {\r\n            LEDMatrix[i][j] = i * 16 + 15 - j;\r\n        }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Display a digit on the LED matrix.\r\n * @param digit The digit to display (0-9).\r\n * @param xOffset The x offset to start displaying the digit.\r\n * @param yOffset The y offset to start displaying the digit.\r\n * Offset is the top left corner of the digit.\r\n * @param color The color to display the digit.\r\n */\r\nvoid display_digit(int digit, int xOffset, int yOffset, CRGB color) {\r\n    if (digit < 0 || digit > 9) return;\r\n    \r\n    for (int row = 0; row < 5; row++) {\r\n        for (int col = 0; col < 3; col++) {\r\n            if (DIGIT_PATTERNS[digit][4-row][col]) {  // Invert row index\r\n                leds[LEDMatrix[row + xOffset][col + yOffset]] = color;\r\n            } else {\r\n                leds[LEDMatrix[row + xOffset][col + yOffset]] = CRGB::Black;\r\n            }\r\n        }\r\n    }\r\n    FastLED.show();\r\n}\r\n\r\n/**\r\n * Display a score on the LED matrix.\r\n * @param score The score to display.\r\n * @param color The color to display the score.\r\n */\r\nvoid display_score(int score, CRGB color) {\r\n    FastLED.clear();\r\n    \r\n    if (score >= 10) {\r\n        display_digit(score / 10, 6, 4, color);  // Left digit\r\n        display_digit(score % 10, 6, 8, color);  // Right digit\r\n    } else {\r\n        display_digit(score, 6, 8, color);  // Single digit, right-aligned\r\n    }\r\n    FastLED.show();\r\n}\r\n\r\n/** \r\n * Set the color of a 3x3 block on the LED matrix.\r\n * @param x The x coordinate of the block (0-2).\r\n * @param y The y coordinate of the block (0-2).\r\n */\r\nvoid setButtonColor(int x, int y, CRGB color) {\r\n    for (int i = 0; i < 5; i++) {\r\n        for (int j = 0; j < 5; j++) {\r\n            leds[LEDMatrix[x * 5 + i][y * 5 + j]] = color;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Set the color of a 4x4 block on the LED matrix.\r\n * @param x The x coordinate of the block (0-3).\r\n * @param y The y coordinate of the block (0-3).\r\n */\r\nvoid setBlockColor_4(int x, int y, CRGB color) {\r\n    for (int i = 0; i < 4; i++) {\r\n        for (int j = 0; j < 4; j++) {\r\n            leds[LEDMatrix[x * 4 + i][y * 4 + j]] = color;\r\n        }\r\n    }\r\n}"
        }
    ]
}