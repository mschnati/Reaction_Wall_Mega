{
    "sourceFile": "src/utils.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1740851085041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740851747819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+#include \"utils.h\"\r\n+\r\n+static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n+\r\n+/**\r\n+ * Check if a button has been pressed.\r\n+ * @param buttonNum The button number to check.\r\n+ * @return True if the button has been pressed.\r\n+ */\r\n+bool checkButton(int buttonNum) {\r\n+    int reading = digitalRead(buttons[buttonNum]);\r\n+    \r\n+    if (reading != lastButtonStates[buttonNum]) {\r\n+        lastDebounceTime[buttonNum] = millis();\r\n+    }\r\n+    \r\n+    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n+        if (reading != buttonStates[buttonNum]) {\r\n+            buttonStates[buttonNum] = reading;\r\n+            if (buttonStates[buttonNum] == LOW) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    lastButtonStates[buttonNum] = reading;\r\n+    return false;\r\n+}\r\n+\r\n+/**\r\n+ * Update the display with the given message.\r\n+ * @param message The message to display.\r\n+ */\r\n+void updateDisplay(const char* message, int line, int textSize) {\r\n+    display.setTextSize(textSize);\r\n+    display.setTextColor(SSD1306_WHITE);\r\n+    display.setCursor(0, line * 8 * textSize);\r\n+    display.println(message);\r\n+    display.display();\r\n+}\r\n+\r\n+#ifdef TEST\r\n+void buttonTest() {\r\n+\r\n+  Serial.begin(9600);  // Add debug output\r\n+  unsigned long lastPrintTime = 0;\r\n+  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(BUTTON_2), digitalRead(BUTTON_3), \r\n+                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n+                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n+  \r\n+    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n+        for (int i = 0; i < 9; i++) {\r\n+            if (readings[i] != lastButtonStates[i]) {\r\n+                Serial.print(\"Button \");\r\n+                Serial.print(i + 1);\r\n+                Serial.print(\": \");\r\n+                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n+            }\r\n+        }\r\n+        lastPrintTime = millis();\r\n+    }\r\n+\r\n+  for (int i = 0; i < 9; i++) {\r\n+    if (readings[i] != lastButtonStates[i]) {\r\n+      lastDebounceTime[i] = millis();\r\n+      Serial.print(\"Button \");\r\n+      Serial.print(i+1);\r\n+      Serial.println(\" state changed\");\r\n+    }\r\n+\r\n+    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n+      if (readings[i] != buttonStates[i]) {\r\n+        buttonStates[i] = readings[i];\r\n+        if (buttonStates[i] == LOW) {\r\n+          // set to random color\r\n+          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n+          FastLED.show();\r\n+          delay(DISPLAY_TIME);\r\n+          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n+          FastLED.show();\r\n+        }\r\n+      }\r\n+    }\r\n+    lastButtonStates[i] = readings[i];\r\n+  }\r\n+}\r\n+  #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740851753997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+#include \"utils.h\"\r\n+\r\n+static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n+\r\n+/**\r\n+ * Check if a button has been pressed.\r\n+ * @param buttonNum The button number to check.\r\n+ * @return True if the button has been pressed.\r\n+ */\r\n+bool checkButton(int buttonNum) {\r\n+    int reading = digitalRead(buttons[buttonNum]);\r\n+    \r\n+    if (reading != lastButtonStates[buttonNum]) {\r\n+        lastDebounceTime[buttonNum] = millis();\r\n+    }\r\n+    \r\n+    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n+        if (reading != buttonStates[buttonNum]) {\r\n+            buttonStates[buttonNum] = reading;\r\n+            if (buttonStates[buttonNum] == LOW) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    lastButtonStates[buttonNum] = reading;\r\n+    return false;\r\n+}\r\n+\r\n+/**\r\n+ * Update the display with the given message.\r\n+ * @param message The message to display.\r\n+ */\r\n+void updateDisplay(const char* message, int line, int textSize) {\r\n+    display.setTextSize(textSize);\r\n+    display.setTextColor(SSD1306_WHITE);\r\n+    display.setCursor(0, line * 8 * textSize);\r\n+    display.println(message);\r\n+    display.display();\r\n+}\r\n+\r\n+#ifdef TEST\r\n+void buttonTest() {\r\n+\r\n+  Serial.begin(9600);  // Add debug output\r\n+  unsigned long lastPrintTime = 0;\r\n+  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(BUTTON_3), \r\n+                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n+                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n+  \r\n+    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n+        for (int i = 0; i < 9; i++) {\r\n+            if (readings[i] != lastButtonStates[i]) {\r\n+                Serial.print(\"Button \");\r\n+                Serial.print(i + 1);\r\n+                Serial.print(\": \");\r\n+                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n+            }\r\n+        }\r\n+        lastPrintTime = millis();\r\n+    }\r\n+\r\n+  for (int i = 0; i < 9; i++) {\r\n+    if (readings[i] != lastButtonStates[i]) {\r\n+      lastDebounceTime[i] = millis();\r\n+      Serial.print(\"Button \");\r\n+      Serial.print(i+1);\r\n+      Serial.println(\" state changed\");\r\n+    }\r\n+\r\n+    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n+      if (readings[i] != buttonStates[i]) {\r\n+        buttonStates[i] = readings[i];\r\n+        if (buttonStates[i] == LOW) {\r\n+          // set to random color\r\n+          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n+          FastLED.show();\r\n+          delay(DISPLAY_TIME);\r\n+          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n+          FastLED.show();\r\n+        }\r\n+      }\r\n+    }\r\n+    lastButtonStates[i] = readings[i];\r\n+  }\r\n+}\r\n+  #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740851764425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+#include \"utils.h\"\r\n+\r\n+static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n+\r\n+/**\r\n+ * Check if a button has been pressed.\r\n+ * @param buttonNum The button number to check.\r\n+ * @return True if the button has been pressed.\r\n+ */\r\n+bool checkButton(int buttonNum) {\r\n+    int reading = digitalRead(buttons[buttonNum]);\r\n+    \r\n+    if (reading != lastButtonStates[buttonNum]) {\r\n+        lastDebounceTime[buttonNum] = millis();\r\n+    }\r\n+    \r\n+    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n+        if (reading != buttonStates[buttonNum]) {\r\n+            buttonStates[buttonNum] = reading;\r\n+            if (buttonStates[buttonNum] == LOW) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    lastButtonStates[buttonNum] = reading;\r\n+    return false;\r\n+}\r\n+\r\n+/**\r\n+ * Update the display with the given message.\r\n+ * @param message The message to display.\r\n+ */\r\n+void updateDisplay(const char* message, int line, int textSize) {\r\n+    display.setTextSize(textSize);\r\n+    display.setTextColor(SSD1306_WHITE);\r\n+    display.setCursor(0, line * 8 * textSize);\r\n+    display.println(message);\r\n+    display.display();\r\n+}\r\n+\r\n+#ifdef TEST\r\n+void buttonTest() {\r\n+\r\n+  Serial.begin(9600);  // Add debug output\r\n+  unsigned long lastPrintTime = 0;\r\n+  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n+                    digitalRead(CAP_TOUCH_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n+                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n+  \r\n+    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n+        for (int i = 0; i < 9; i++) {\r\n+            if (readings[i] != lastButtonStates[i]) {\r\n+                Serial.print(\"Button \");\r\n+                Serial.print(i + 1);\r\n+                Serial.print(\": \");\r\n+                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n+            }\r\n+        }\r\n+        lastPrintTime = millis();\r\n+    }\r\n+\r\n+  for (int i = 0; i < 9; i++) {\r\n+    if (readings[i] != lastButtonStates[i]) {\r\n+      lastDebounceTime[i] = millis();\r\n+      Serial.print(\"Button \");\r\n+      Serial.print(i+1);\r\n+      Serial.println(\" state changed\");\r\n+    }\r\n+\r\n+    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n+      if (readings[i] != buttonStates[i]) {\r\n+        buttonStates[i] = readings[i];\r\n+        if (buttonStates[i] == LOW) {\r\n+          // set to random color\r\n+          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n+          FastLED.show();\r\n+          delay(DISPLAY_TIME);\r\n+          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n+          FastLED.show();\r\n+        }\r\n+      }\r\n+    }\r\n+    lastButtonStates[i] = readings[i];\r\n+  }\r\n+}\r\n+  #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740851772525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n \r\n   Serial.begin(9600);  // Add debug output\r\n   unsigned long lastPrintTime = 0;\r\n   const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n-  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n-                    digitalRead(CAP_TOUCH_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), CAP_TOUCH_1\r\n+                    digitalRead(CAP_TOUCH_4), digitalRead(CAP_TOUCH_1), digitalRead(BUTTON_6), \r\n                     digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n   \r\n     if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n         for (int i = 0; i < 9; i++) {\r\n@@ -86,275 +86,5 @@\n     }\r\n     lastButtonStates[i] = readings[i];\r\n   }\r\n }\r\n-  #endif\n-#include \"utils.h\"\r\n-\r\n-static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n-\r\n-/**\r\n- * Check if a button has been pressed.\r\n- * @param buttonNum The button number to check.\r\n- * @return True if the button has been pressed.\r\n- */\r\n-bool checkButton(int buttonNum) {\r\n-    int reading = digitalRead(buttons[buttonNum]);\r\n-    \r\n-    if (reading != lastButtonStates[buttonNum]) {\r\n-        lastDebounceTime[buttonNum] = millis();\r\n-    }\r\n-    \r\n-    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n-        if (reading != buttonStates[buttonNum]) {\r\n-            buttonStates[buttonNum] = reading;\r\n-            if (buttonStates[buttonNum] == LOW) {\r\n-                return true;\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    lastButtonStates[buttonNum] = reading;\r\n-    return false;\r\n-}\r\n-\r\n-/**\r\n- * Update the display with the given message.\r\n- * @param message The message to display.\r\n- */\r\n-void updateDisplay(const char* message, int line, int textSize) {\r\n-    display.setTextSize(textSize);\r\n-    display.setTextColor(SSD1306_WHITE);\r\n-    display.setCursor(0, line * 8 * textSize);\r\n-    display.println(message);\r\n-    display.display();\r\n-}\r\n-\r\n-#ifdef TEST\r\n-void buttonTest() {\r\n-\r\n-  Serial.begin(9600);  // Add debug output\r\n-  unsigned long lastPrintTime = 0;\r\n-  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n-  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(BUTTON_3), \r\n-                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n-                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n-  \r\n-    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n-        for (int i = 0; i < 9; i++) {\r\n-            if (readings[i] != lastButtonStates[i]) {\r\n-                Serial.print(\"Button \");\r\n-                Serial.print(i + 1);\r\n-                Serial.print(\": \");\r\n-                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n-            }\r\n-        }\r\n-        lastPrintTime = millis();\r\n-    }\r\n-\r\n-  for (int i = 0; i < 9; i++) {\r\n-    if (readings[i] != lastButtonStates[i]) {\r\n-      lastDebounceTime[i] = millis();\r\n-      Serial.print(\"Button \");\r\n-      Serial.print(i+1);\r\n-      Serial.println(\" state changed\");\r\n-    }\r\n-\r\n-    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n-      if (readings[i] != buttonStates[i]) {\r\n-        buttonStates[i] = readings[i];\r\n-        if (buttonStates[i] == LOW) {\r\n-          // set to random color\r\n-          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n-          FastLED.show();\r\n-          delay(DISPLAY_TIME);\r\n-          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n-          FastLED.show();\r\n-        }\r\n-      }\r\n-    }\r\n-    lastButtonStates[i] = readings[i];\r\n-  }\r\n-}\r\n-  #endif\n-#include \"utils.h\"\r\n-\r\n-static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n-\r\n-/**\r\n- * Check if a button has been pressed.\r\n- * @param buttonNum The button number to check.\r\n- * @return True if the button has been pressed.\r\n- */\r\n-bool checkButton(int buttonNum) {\r\n-    int reading = digitalRead(buttons[buttonNum]);\r\n-    \r\n-    if (reading != lastButtonStates[buttonNum]) {\r\n-        lastDebounceTime[buttonNum] = millis();\r\n-    }\r\n-    \r\n-    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n-        if (reading != buttonStates[buttonNum]) {\r\n-            buttonStates[buttonNum] = reading;\r\n-            if (buttonStates[buttonNum] == LOW) {\r\n-                return true;\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    lastButtonStates[buttonNum] = reading;\r\n-    return false;\r\n-}\r\n-\r\n-/**\r\n- * Update the display with the given message.\r\n- * @param message The message to display.\r\n- */\r\n-void updateDisplay(const char* message, int line, int textSize) {\r\n-    display.setTextSize(textSize);\r\n-    display.setTextColor(SSD1306_WHITE);\r\n-    display.setCursor(0, line * 8 * textSize);\r\n-    display.println(message);\r\n-    display.display();\r\n-}\r\n-\r\n-#ifdef TEST\r\n-void buttonTest() {\r\n-\r\n-  Serial.begin(9600);  // Add debug output\r\n-  unsigned long lastPrintTime = 0;\r\n-  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n-  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(BUTTON_2), digitalRead(BUTTON_3), \r\n-                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n-                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n-  \r\n-    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n-        for (int i = 0; i < 9; i++) {\r\n-            if (readings[i] != lastButtonStates[i]) {\r\n-                Serial.print(\"Button \");\r\n-                Serial.print(i + 1);\r\n-                Serial.print(\": \");\r\n-                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n-            }\r\n-        }\r\n-        lastPrintTime = millis();\r\n-    }\r\n-\r\n-  for (int i = 0; i < 9; i++) {\r\n-    if (readings[i] != lastButtonStates[i]) {\r\n-      lastDebounceTime[i] = millis();\r\n-      Serial.print(\"Button \");\r\n-      Serial.print(i+1);\r\n-      Serial.println(\" state changed\");\r\n-    }\r\n-\r\n-    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n-      if (readings[i] != buttonStates[i]) {\r\n-        buttonStates[i] = readings[i];\r\n-        if (buttonStates[i] == LOW) {\r\n-          // set to random color\r\n-          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n-          FastLED.show();\r\n-          delay(DISPLAY_TIME);\r\n-          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n-          FastLED.show();\r\n-        }\r\n-      }\r\n-    }\r\n-    lastButtonStates[i] = readings[i];\r\n-  }\r\n-}\r\n-  #endif\n-#include \"utils.h\"\r\n-\r\n-static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n-static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n-\r\n-/**\r\n- * Check if a button has been pressed.\r\n- * @param buttonNum The button number to check.\r\n- * @return True if the button has been pressed.\r\n- */\r\n-bool checkButton(int buttonNum) {\r\n-    int reading = digitalRead(buttons[buttonNum - 1]);\r\n-    \r\n-    if (reading != lastButtonStates[buttonNum]) {\r\n-        lastDebounceTime[buttonNum] = millis();\r\n-    }\r\n-    \r\n-    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n-        if (reading != buttonStates[buttonNum]) {\r\n-            buttonStates[buttonNum] = reading;\r\n-            if (buttonStates[buttonNum] == LOW) {\r\n-                return true;\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    lastButtonStates[buttonNum] = reading;\r\n-    return false;\r\n-}\r\n-\r\n-/**\r\n- * Update the display with the given message.\r\n- * @param message The message to display.\r\n- */\r\n-void updateDisplay(const char* message, int line, int textSize) {\r\n-    display.setTextSize(textSize);\r\n-    display.setTextColor(SSD1306_WHITE);\r\n-    display.setCursor(0, line * 8 * textSize);\r\n-    display.println(message);\r\n-    display.display();\r\n-}\r\n-\r\n-#ifdef TEST\r\n-void buttonTest() {\r\n-\r\n-  Serial.begin(9600);  // Add debug output\r\n-  unsigned long lastPrintTime = 0;\r\n-  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n-  int readings[] = {digitalRead(BUTTON_1), digitalRead(BUTTON_2), digitalRead(BUTTON_3), \r\n-                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n-                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n-  \r\n-    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n-        for (int i = 0; i < 9; i++) {\r\n-            if (readings[i] != lastButtonStates[i]) {\r\n-                Serial.print(\"Button \");\r\n-                Serial.print(i + 1);\r\n-                Serial.print(\": \");\r\n-                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n-            }\r\n-        }\r\n-        lastPrintTime = millis();\r\n-    }\r\n-\r\n-  for (int i = 0; i < 9; i++) {\r\n-    if (readings[i] != lastButtonStates[i]) {\r\n-      lastDebounceTime[i] = millis();\r\n-      Serial.print(\"Button \");\r\n-      Serial.print(i+1);\r\n-      Serial.println(\" state changed\");\r\n-    }\r\n-\r\n-    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n-      if (readings[i] != buttonStates[i]) {\r\n-        buttonStates[i] = readings[i];\r\n-        if (buttonStates[i] == LOW) {\r\n-          // set to random color\r\n-          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n-          FastLED.show();\r\n-          delay(DISPLAY_TIME);\r\n-          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n-          FastLED.show();\r\n-        }\r\n-      }\r\n-    }\r\n-    lastButtonStates[i] = readings[i];\r\n-  }\r\n-}\r\n   #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740851779866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n   Serial.begin(9600);  // Add debug output\r\n   unsigned long lastPrintTime = 0;\r\n   const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n-  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n                     digitalRead(CAP_TOUCH_4), digitalRead(CAP_TOUCH_1), digitalRead(BUTTON_6), \r\n                     digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n   \r\n     if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n"
                },
                {
                    "date": 1740851786435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+#include \"utils.h\"\r\n+\r\n+static bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\n+static unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n+\r\n+/**\r\n+ * Check if a button has been pressed.\r\n+ * @param buttonNum The button number to check.\r\n+ * @return True if the button has been pressed.\r\n+ */\r\n+bool checkButton(int buttonNum) {\r\n+    int reading = digitalRead(buttons[buttonNum]);\r\n+    \r\n+    if (reading != lastButtonStates[buttonNum]) {\r\n+        lastDebounceTime[buttonNum] = millis();\r\n+    }\r\n+    \r\n+    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n+        if (reading != buttonStates[buttonNum]) {\r\n+            buttonStates[buttonNum] = reading;\r\n+            if (buttonStates[buttonNum] == LOW) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    lastButtonStates[buttonNum] = reading;\r\n+    return false;\r\n+}\r\n+\r\n+/**\r\n+ * Update the display with the given message.\r\n+ * @param message The message to display.\r\n+ */\r\n+void updateDisplay(const char* message, int line, int textSize) {\r\n+    display.setTextSize(textSize);\r\n+    display.setTextColor(SSD1306_WHITE);\r\n+    display.setCursor(0, line * 8 * textSize);\r\n+    display.println(message);\r\n+    display.display();\r\n+}\r\n+\r\n+#ifdef TEST\r\n+void buttonTest() {\r\n+\r\n+  Serial.begin(9600);  // Add debug output\r\n+  unsigned long lastPrintTime = 0;\r\n+  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n+  int readings[] = {digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n+                    digitalRead(CAP_TOUCH_4), digitalRead(CAP_TOUCH_1), digitalRead(BUTTON_6), digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), \r\n+                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)digitalRead(CAP_TOUCH_1), digitalRead(CAP_TOUCH_2), digitalRead(CAP_TOUCH_3), };\r\n+  \r\n+    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n+        for (int i = 0; i < 9; i++) {\r\n+            if (readings[i] != lastButtonStates[i]) {\r\n+                Serial.print(\"Button \");\r\n+                Serial.print(i + 1);\r\n+                Serial.print(\": \");\r\n+                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n+            }\r\n+        }\r\n+        lastPrintTime = millis();\r\n+    }\r\n+\r\n+  for (int i = 0; i < 9; i++) {\r\n+    if (readings[i] != lastButtonStates[i]) {\r\n+      lastDebounceTime[i] = millis();\r\n+      Serial.print(\"Button \");\r\n+      Serial.print(i+1);\r\n+      Serial.println(\" state changed\");\r\n+    }\r\n+\r\n+    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n+      if (readings[i] != buttonStates[i]) {\r\n+        buttonStates[i] = readings[i];\r\n+        if (buttonStates[i] == LOW) {\r\n+          // set to random color\r\n+          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n+          FastLED.show();\r\n+          delay(DISPLAY_TIME);\r\n+          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n+          FastLED.show();\r\n+        }\r\n+      }\r\n+    }\r\n+    lastButtonStates[i] = readings[i];\r\n+  }\r\n+}\r\n+  #endif\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740851085041,
            "name": "Commit-0",
            "content": "#include \"utils.h\"\r\n\r\nstatic bool lastButtonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\nstatic bool buttonStates[NUM_BUTTONS] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};\r\nstatic unsigned long lastDebounceTime[NUM_BUTTONS] = {0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n\r\n/**\r\n * Check if a button has been pressed.\r\n * @param buttonNum The button number to check.\r\n * @return True if the button has been pressed.\r\n */\r\nbool checkButton(int buttonNum) {\r\n    int reading = digitalRead(buttons[buttonNum - 1]);\r\n    \r\n    if (reading != lastButtonStates[buttonNum]) {\r\n        lastDebounceTime[buttonNum] = millis();\r\n    }\r\n    \r\n    if ((millis() - lastDebounceTime[buttonNum]) > DEBOUNCE_TIME) {\r\n        if (reading != buttonStates[buttonNum]) {\r\n            buttonStates[buttonNum] = reading;\r\n            if (buttonStates[buttonNum] == LOW) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    lastButtonStates[buttonNum] = reading;\r\n    return false;\r\n}\r\n\r\n/**\r\n * Update the display with the given message.\r\n * @param message The message to display.\r\n */\r\nvoid updateDisplay(const char* message, int line, int textSize) {\r\n    display.setTextSize(textSize);\r\n    display.setTextColor(SSD1306_WHITE);\r\n    display.setCursor(0, line * 8 * textSize);\r\n    display.println(message);\r\n    display.display();\r\n}\r\n\r\n#ifdef TEST\r\nvoid buttonTest() {\r\n\r\n  Serial.begin(9600);  // Add debug output\r\n  unsigned long lastPrintTime = 0;\r\n  const unsigned long PRINT_INTERVAL = 1000; // 1 second between prints\r\n  int readings[] = {digitalRead(BUTTON_1), digitalRead(BUTTON_2), digitalRead(BUTTON_3), \r\n                    digitalRead(BUTTON_4), digitalRead(BUTTON_5), digitalRead(BUTTON_6), \r\n                    digitalRead(BUTTON_7), digitalRead(BUTTON_8), digitalRead(BUTTON_9)};\r\n  \r\n    if (millis() - lastPrintTime >= PRINT_INTERVAL) {\r\n        for (int i = 0; i < 9; i++) {\r\n            if (readings[i] != lastButtonStates[i]) {\r\n                Serial.print(\"Button \");\r\n                Serial.print(i + 1);\r\n                Serial.print(\": \");\r\n                Serial.println(readings[i] ? \"HIGH\" : \"LOW\");\r\n            }\r\n        }\r\n        lastPrintTime = millis();\r\n    }\r\n\r\n  for (int i = 0; i < 9; i++) {\r\n    if (readings[i] != lastButtonStates[i]) {\r\n      lastDebounceTime[i] = millis();\r\n      Serial.print(\"Button \");\r\n      Serial.print(i+1);\r\n      Serial.println(\" state changed\");\r\n    }\r\n\r\n    if ((millis() - lastDebounceTime[i]) > DEBOUNCE_TIME) {\r\n      if (readings[i] != buttonStates[i]) {\r\n        buttonStates[i] = readings[i];\r\n        if (buttonStates[i] == LOW) {\r\n          // set to random color\r\n          setBlockColor_3(i / 3, i % 3, CRGB(random(255), random(255), random(255)));\r\n          FastLED.show();\r\n          delay(DISPLAY_TIME);\r\n          setBlockColor_3(i / 3, i % 3, CRGB::Black);\r\n          FastLED.show();\r\n        }\r\n      }\r\n    }\r\n    lastButtonStates[i] = readings[i];\r\n  }\r\n}\r\n  #endif"
        }
    ]
}