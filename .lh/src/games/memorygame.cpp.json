{
    "sourceFile": "src/games/memorygame.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741200979776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741200989034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-//// filepath: /c:/Users/Schnati/Documents/PlatformIO/Projects/Reaction_Wall_Arduino_Mega/src/games/memorygame.cpp\r\n #include \"globals.h\"\r\n #include <stdlib.h>\r\n #include <string.h>\r\n \r\n-#define BOARD_ROWS 6\r\n+#define BOARD_ROWS NUM\r\n #define BOARD_COLS 6\r\n \r\n // Structure to hold the game state.\r\n struct MemoryGameState {\r\n"
                },
                {
                    "date": 1741200995847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,6 @@\n         state->sequenceLength++;\r\n         \r\n         updateDisplay(\"Good!\", 3, 8);\r\n         delay(500);\r\n- \n\\ No newline at end of file\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741201059622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     bool pressed = false;\r\n     while (!pressed) {\r\n         for (int r = 0; r < BOARD_ROWS; r++) {\r\n             for (int c = 0; c < BOARD_COLS; c++) {\r\n-                int btnID = ButtonMatrix[r][c]; // Assumes ButtonMatrix is defined globally.\r\n+                int btnID = ButtonMatrix[r][c]; \r\n                 if (checkButton(btnID + 1)) {    // Adjust index if needed.\r\n                     *pressedRow = r;\r\n                     *pressedCol = c;\r\n                     pressed = true;\r\n"
                }
            ],
            "date": 1741200979776,
            "name": "Commit-0",
            "content": "//// filepath: /c:/Users/Schnati/Documents/PlatformIO/Projects/Reaction_Wall_Arduino_Mega/src/games/memorygame.cpp\r\n#include \"globals.h\"\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\n#define BOARD_ROWS 6\r\n#define BOARD_COLS 6\r\n\r\n// Structure to hold the game state.\r\nstruct MemoryGameState {\r\n    int sequence[64][2];   // Stores up to 64 moves. Each entry is a {row, col} pair.\r\n    int sequenceLength;\r\n    bool isGameActive;\r\n};\r\n\r\n// Flashes the square at (row, col) with the given color for 'duration' milliseconds.\r\nstatic void flashSquare(int row, int col, CRGB color, int duration) {\r\n    setButtonColor(row, col, color);\r\n    FastLED.show();\r\n    delay(duration);\r\n    setButtonColor(row, col, CRGB::Black);\r\n    FastLED.show();\r\n    delay(100);   // Short pause between flashes.\r\n}\r\n\r\n// Waits until a button is pressed and returns the corresponding row and column via the pointers.\r\n// This function polls the entire matrix.\r\nstatic void waitForButtonPress(int* pressedRow, int* pressedCol) {\r\n    bool pressed = false;\r\n    while (!pressed) {\r\n        for (int r = 0; r < BOARD_ROWS; r++) {\r\n            for (int c = 0; c < BOARD_COLS; c++) {\r\n                int btnID = ButtonMatrix[r][c]; // Assumes ButtonMatrix is defined globally.\r\n                if (checkButton(btnID + 1)) {    // Adjust index if needed.\r\n                    *pressedRow = r;\r\n                    *pressedCol = c;\r\n                    pressed = true;\r\n                    delay(200); // Debounce delay.\r\n                    break;\r\n                }\r\n            }\r\n            if (pressed) break;\r\n        }\r\n    }\r\n}\r\n\r\n// Runs a complete round of the memory game.\r\nvoid memorygame_run(MemoryGameState* state) {\r\n    // Initialize game state.\r\n    state->sequenceLength = 0;\r\n    state->isGameActive = true;\r\n    \r\n    // Start by adding the first random square.\r\n    state->sequence[state->sequenceLength][0] = random(BOARD_ROWS);\r\n    state->sequence[state->sequenceLength][1] = random(BOARD_COLS);\r\n    state->sequenceLength++;\r\n\r\n    while (state->isGameActive) {\r\n        // Display the current sequence.\r\n        updateDisplay(\"Memory Game\", 0, 10);\r\n        for (int i = 0; i < state->sequenceLength; i++) {\r\n            int r = state->sequence[i][0];\r\n            int c = state->sequence[i][1];\r\n            flashSquare(r, c, CRGB::White, 500);\r\n            delay(200);\r\n        }\r\n        \r\n        // Let the player repeat the sequence.\r\n        for (int i = 0; i < state->sequenceLength; i++) {\r\n            int inputRow = -1, inputCol = -1;\r\n            waitForButtonPress(&inputRow, &inputCol);\r\n            \r\n            // If the player pressed the wrong button, show error and end the game.\r\n            if (inputRow != state->sequence[i][0] || inputCol != state->sequence[i][1]) {\r\n                updateDisplay(\"Game Over\", 3, 8);\r\n                // Flash error indication.\r\n                for (int j = 0; j < 3; j++) {\r\n                    FastLED.clear();\r\n                    FastLED.show();\r\n                    delay(200);\r\n                    setButtonColor(inputRow, inputCol, CRGB::Red);\r\n                    FastLED.show();\r\n                    delay(200);\r\n                }\r\n                state->isGameActive = false;\r\n                return;\r\n            } else {\r\n                // Correct press. Indicate success briefly.\r\n                flashSquare(inputRow, inputCol, CRGB::Green, 200);\r\n            }\r\n        }\r\n        \r\n        // Player completed the sequence correctly. Add a new random move.\r\n        state->sequence[state->sequenceLength][0] = random(BOARD_ROWS);\r\n        state->sequence[state->sequenceLength][1] = random(BOARD_COLS);\r\n        state->sequenceLength++;\r\n        \r\n        updateDisplay(\"Good!\", 3, 8);\r\n        delay(500);\r\n    }\r\n}"
        }
    ]
}