{
    "sourceFile": "src/games/reactiongame.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1740854484096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740854491040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(5)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setBlockColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855004234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n  * @param duration Duration in milliseconds\r\n  */\r\n void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n     GAME_DURATION = duration;\r\n-    display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n }\r\n \r\n /**\r\n  * Initialize the reaction game state\r\n@@ -72,9 +72,9 @@\n     state->activeBlock = new_block;\r\n     int newX = state->activeBlock / 3;\r\n     int newY = state->activeBlock % 3;\r\n     // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setBlockColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n     FastLED.show();\r\n }\r\n \r\n /**\r\n@@ -142,149 +142,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setBlockColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setBlockColor_3(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740855159434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(5)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855165949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n #include \"reactiongame.h\"\r\n #include \"matrix.h\"\r\n \r\n int GAME_DURATION = 15000;  // 15 seconds\r\n+#\r\n \r\n-\r\n /**\r\n  * Set the duration of the reaction game in milliseconds\r\n  * @param state Pointer to the ReactionGameState struct\r\n  * @param duration Duration in milliseconds\r\n@@ -143,149 +143,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740855172176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(5)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855188956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(5)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855201302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 2\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(5)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855245176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,443 +145,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740855251772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(8)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855257201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(2)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855262749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855290857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if () GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        display.clearDisplay();\r\n+        updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855297236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n     reaction_game_set_duration(state, GAME_DURATION);\r\n     while (!checkButton(ACCEPT_BUTTON)) {\r\n         if (checkButton(UP_BUTTON)) {\r\n-            if () GAME_DURATION += 1000;\r\n+            if (GAME_DURATION < ) GAME_DURATION += 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n         } else if (checkButton(DOWN_BUTTON)) {\r\n             if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n@@ -145,596 +145,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 2\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(5)) {\r\n-        if (checkButton(8)) {\r\n-            GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(2)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740855317599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / 3;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855469721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % 3;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(9);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855475870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n  */\r\n void reaction_game_set_new_block(ReactionGameState* state) {\r\n     // Clear current block\r\n     int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % 3;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n     setButtonColor(oldX, oldY, CRGB::Black);\r\n     \r\n     // Set new random block, different from the current one\r\n     int new_block = random(9);\r\n@@ -145,300 +145,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < ) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        display.clearDisplay();\r\n-        updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / 3;\r\n-    int oldY = state->activeBlock % 3;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740855482763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(9);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / 3;\r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855490539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / \r\n+    int newY = state->activeBlock % 3;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855496291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % \r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855520276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855525907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855532427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740855575457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740856353289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n \r\n     if (checkButton(state->activeBlock + 1)) {\r\n         char message[16];\r\n         sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n+        // display.clearDisplay();\r\n         // updateDisplay(message, 1, 2);\r\n         state->score++;\r\n         reaction_game_set_new_block(state);\r\n     }\r\n@@ -145,1040 +145,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % \r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / \r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(9);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(9);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / 3;\r\n-    int newY = state->activeBlock % 3;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        display.clearDisplay();\r\n-        updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740858205465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n  */\r\n void reaction_game_start(ReactionGameState* state) {\r\n     // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n     reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor\r\n     while (!checkButton(ACCEPT_BUTTON)) {\r\n         if (checkButton(UP_BUTTON)) {\r\n             if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n"
                },
                {
                    "date": 1740858211163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    set\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740858216784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS);\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859069631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // \r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859285496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n     while (!checkButton(ACCEPT_BUTTON)) {\r\n         if (checkButton(UP_BUTTON)) {\r\n             if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n+            set\r\n         } else if (checkButton(DOWN_BUTTON)) {\r\n             if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n         }\r\n@@ -70,9 +71,9 @@\n     int oldY = state->activeBlock % BUTTON_ROWS;\r\n     setButtonColor(oldX, oldY, CRGB::Black);\r\n     \r\n     // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // \r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n     while (new_block == state->activeBlock) {\r\n         new_block = random(NUM_BUTTONS);\r\n     }\r\n     state->activeBlock = new_block;\r\n@@ -148,453 +149,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    set\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS);\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740859292353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859301990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859310273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeBlock = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            \r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    int oldX = state->activeBlock / BUTTON_COLS;\r\n+    int oldY = state->activeBlock % BUTTON_ROWS;\r\n+    setButtonColor(oldX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859316657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,163 +48,13 @@\n             FastLED.show();\r\n         } else if (checkButton(DOWN_BUTTON)) {\r\n             if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n             reaction_game_set_duration(state, GAME_DURATION);\r\n-            \r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n             FastLED.show();\r\n-            delay\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n         }\r\n         // format string with duration\r\n         // display.clearDisplay();\r\n         // updateDisplay(\"Reaction Game\", 0, 1);\r\n@@ -308,308 +158,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            set\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740859507466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include \"reactiongame.h\"\r\n #include \"matrix.h\"\r\n \r\n-int GAME_DURATION = 15000;  // 15 seconds\r\n+unsigned GAME_DURATION = 15000;  // 15 seconds\r\n #define ACCEPT_BUTTON 22\r\n #define UP_BUTTON 27\r\n #define DOWN_BUTTON 15\r\n \r\n"
                },
                {
                    "date": 1740859701307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n  */\r\n void reaction_game_init(ReactionGameState* state) {\r\n     state->score = 0;\r\n     state->gameStartTime = 0;\r\n-    state->activeBlock = 0;\r\n+    state->active\r\n     state->isGameActive = false;\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1740859715656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include \"reactiongame.h\"\r\n #include \"matrix.h\"\r\n \r\n-unsigned GAME_DURATION = 15000;  // 15 seconds\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n #define ACCEPT_BUTTON 22\r\n #define UP_BUTTON 27\r\n #define DOWN_BUTTON 15\r\n \r\n@@ -22,9 +22,10 @@\n  */\r\n void reaction_game_init(ReactionGameState* state) {\r\n     state->score = 0;\r\n     state->gameStartTime = 0;\r\n-    state->active\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n     state->isGameActive = false;\r\n }\r\n \r\n /**\r\n@@ -75,10 +76,8 @@\n  * @param state Pointer to the ReactionGameState struct\r\n  */\r\n void reaction_game_set_new_block(ReactionGameState* state) {\r\n     // Clear current block\r\n-    int oldX = state->activeBlock / BUTTON_COLS;\r\n-    int oldY = state->activeBlock % BUTTON_ROWS;\r\n     setButtonColor(oldX, oldY, CRGB::Black);\r\n     \r\n     // Set new random block, different from the current one\r\n     int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n"
                },
                {
                    "date": 1740859723102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, oldY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859729198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state., CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859746913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(NUM_BUTTONS); // randum number between 0 and 35\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859753688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(6); // randum number between 0 and 5\r\n+    while (new_block == state->activeBlock) {\r\n+        new_block = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859762085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n     \r\n     // Set new random block, different from the current one\r\n     int new_x = random(6); // randum number between 0 and 5\r\n-    while (new_block == state->activeBlock) {\r\n+    while (new_x == state->activeX) {\r\n         new_block = random(NUM_BUTTONS);\r\n     }\r\n     state->activeBlock = new_block;\r\n     int newX = state->activeBlock / BUTTON_COLS;\r\n@@ -157,644 +157,4 @@\n  */\r\n int reaction_game_get_score(ReactionGameState* state) {\r\n     return state->score;\r\n }\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeX = 0;\r\n-    state->activeY = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(4, 2, CRGB::Green);\r\n-            FastLED.show();\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(2, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(2, 2, CRGB::Red);\r\n-            FastLED.show();\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_x = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeX = 0;\r\n-    state->activeY = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(4, 2, CRGB::Green);\r\n-            FastLED.show();\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(2, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(2, 2, CRGB::Red);\r\n-            FastLED.show();\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    setButtonColor(state->activeX, state., CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeX = 0;\r\n-    state->activeY = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(4, 2, CRGB::Green);\r\n-            FastLED.show();\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(2, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(2, 2, CRGB::Red);\r\n-            FastLED.show();\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    setButtonColor(state->activeX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n-#include \"reactiongame.h\"\r\n-#include \"matrix.h\"\r\n-\r\n-unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n-#define ACCEPT_BUTTON 22\r\n-#define UP_BUTTON 27\r\n-#define DOWN_BUTTON 15\r\n-\r\n-/**\r\n- * Set the duration of the reaction game in milliseconds\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @param duration Duration in milliseconds\r\n- */\r\n-void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n-    GAME_DURATION = duration;\r\n-    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n-}\r\n-\r\n-/**\r\n- * Initialize the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_init(ReactionGameState* state) {\r\n-    state->score = 0;\r\n-    state->gameStartTime = 0;\r\n-    state->activeX = 0;\r\n-    state->activeY = 0;\r\n-    state->isGameActive = false;\r\n-}\r\n-\r\n-/**\r\n- * Start the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_start(ReactionGameState* state) {\r\n-    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n-    reaction_game_set_duration(state, GAME_DURATION);\r\n-    setButtonColor(4, 2, CRGB::Green);\r\n-    setButtonColor(2, 2, CRGB::Red);\r\n-    FastLED.show();\r\n-    while (!checkButton(ACCEPT_BUTTON)) {\r\n-        if (checkButton(UP_BUTTON)) {\r\n-            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(4, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(4, 2, CRGB::Green);\r\n-            FastLED.show();\r\n-        } else if (checkButton(DOWN_BUTTON)) {\r\n-            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n-            reaction_game_set_duration(state, GAME_DURATION);\r\n-            setButtonColor(2, 2, CRGB::Black);\r\n-            FastLED.show();\r\n-            delay(100);\r\n-            setButtonColor(2, 2, CRGB::Red);\r\n-            FastLED.show();\r\n-        }\r\n-        // format string with duration\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(\"Reaction Game\", 0, 1);\r\n-        char message[16];\r\n-        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n-        // updateDisplay(message, 3, 1);\r\n-    }\r\n-    FastLED.clear();\r\n-\r\n-    state->score = 0;\r\n-    state->gameStartTime = millis();\r\n-    state->isGameActive = true;\r\n-    reaction_game_set_new_block(state);\r\n-}\r\n-\r\n-/**\r\n- * Set a new random block\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_set_new_block(ReactionGameState* state) {\r\n-    // Clear current block\r\n-    setButtonColor(oldX, oldY, CRGB::Black);\r\n-    \r\n-    // Set new random block, different from the current one\r\n-    int new_block = random(NUM_BUTTONS); // randum number between 0 and 35\r\n-    while (new_block == state->activeBlock) {\r\n-        new_block = random(NUM_BUTTONS);\r\n-    }\r\n-    state->activeBlock = new_block;\r\n-    int newX = state->activeBlock / BUTTON_COLS;\r\n-    int newY = state->activeBlock % BUTTON_ROWS;\r\n-    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n-    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n-    FastLED.show();\r\n-}\r\n-\r\n-/**\r\n- * Update the reaction game state\r\n- * @param state Pointer to the ReactionGameState struct\r\n- */\r\n-void reaction_game_update(ReactionGameState* state) {\r\n-    if (!state->isGameActive) return;\r\n-\r\n-    // Check game over\r\n-    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n-        state->isGameActive = false;\r\n-        state->gameEndTime = millis(); // Record the time when the game ended\r\n-\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        \r\n-        // Display score\r\n-        // display_score(state->score, CRGB::Green);\r\n-        // Display average reaction in ms time on display\r\n-        // display.clearDisplay();\r\n-        char message[32];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // updateDisplay(message, 0, 1);\r\n-\r\n-        if (state->score > 0) {\r\n-            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n-        } else {\r\n-            sprintf(message, \"No Hits\");\r\n-        }\r\n-        // updateDisplay(message, 3, 1);\r\n-        \r\n-        while (millis() - state->gameEndTime < 5000) {\r\n-            // Wait for 5 seconds before returning to main menu\r\n-        }\r\n-        FastLED.clear();\r\n-        FastLED.show();\r\n-        // mainMenu();\r\n-        return;\r\n-    }\r\n-\r\n-    if (checkButton(state->activeBlock + 1)) {\r\n-        char message[16];\r\n-        sprintf(message, \"Score: %d\", state->score);\r\n-        // display.clearDisplay();\r\n-        // updateDisplay(message, 1, 2);\r\n-        state->score++;\r\n-        reaction_game_set_new_block(state);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Check if the reaction game is currently running\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return True if the game is active, false otherwise\r\n- */\r\n-bool reaction_game_is_running(ReactionGameState* state) {\r\n-    return state->isGameActive;\r\n-}\r\n-\r\n-/**\r\n- * Get the current score of the reaction game\r\n- * @param state Pointer to the ReactionGameState struct\r\n- * @return Current score\r\n- */\r\n-int reaction_game_get_score(ReactionGameState* state) {\r\n-    return state->score;\r\n-}\r\n"
                },
                {
                    "date": 1740859769967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(); // randum number between 0 and 5\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859775612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(NUM_\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859781987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(NUM_ROWS);\r\n+    int new_y = random(NUM_COLS);\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859809444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(BUTTON_COLS);\r\n+    int new_y = random(NUM_COLS);\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859815102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(BUTTON_COLS);\r\n+    int new_y = random(BUTTON_\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM_BUTTONS);\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                },
                {
                    "date": 1740859841002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n     \r\n     // Set new random block, different from the current one\r\n     int new_x = random(BUTTON_COLS);\r\n     int new_y = random(BUTTON_ROWS);\r\n+    state->activeX = new_x;\r\n     while (new_x == state->activeX) {\r\n         new_x = random(NUM_BUTTONS);\r\n     }\r\n     state->activeBlock = new_block;\r\n"
                },
                {
                    "date": 1740859869800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+#include \"reactiongame.h\"\r\n+#include \"matrix.h\"\r\n+\r\n+unsigned int GAME_DURATION = 15000;  // 15 seconds\r\n+#define ACCEPT_BUTTON 22\r\n+#define UP_BUTTON 27\r\n+#define DOWN_BUTTON 15\r\n+\r\n+/**\r\n+ * Set the duration of the reaction game in milliseconds\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @param duration Duration in milliseconds\r\n+ */\r\n+void reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n+    GAME_DURATION = duration;\r\n+    // display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n+}\r\n+\r\n+/**\r\n+ * Initialize the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_init(ReactionGameState* state) {\r\n+    state->score = 0;\r\n+    state->gameStartTime = 0;\r\n+    state->activeX = 0;\r\n+    state->activeY = 0;\r\n+    state->isGameActive = false;\r\n+}\r\n+\r\n+/**\r\n+ * Start the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_start(ReactionGameState* state) {\r\n+    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n+    reaction_game_set_duration(state, GAME_DURATION);\r\n+    setButtonColor(4, 2, CRGB::Green);\r\n+    setButtonColor(2, 2, CRGB::Red);\r\n+    FastLED.show();\r\n+    while (!checkButton(ACCEPT_BUTTON)) {\r\n+        if (checkButton(UP_BUTTON)) {\r\n+            if (GAME_DURATION < 45000) GAME_DURATION += 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(4, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(4, 2, CRGB::Green);\r\n+            FastLED.show();\r\n+        } else if (checkButton(DOWN_BUTTON)) {\r\n+            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n+            reaction_game_set_duration(state, GAME_DURATION);\r\n+            setButtonColor(2, 2, CRGB::Black);\r\n+            FastLED.show();\r\n+            delay(100);\r\n+            setButtonColor(2, 2, CRGB::Red);\r\n+            FastLED.show();\r\n+        }\r\n+        // format string with duration\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(\"Reaction Game\", 0, 1);\r\n+        char message[16];\r\n+        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n+        // updateDisplay(message, 3, 1);\r\n+    }\r\n+    FastLED.clear();\r\n+\r\n+    state->score = 0;\r\n+    state->gameStartTime = millis();\r\n+    state->isGameActive = true;\r\n+    reaction_game_set_new_block(state);\r\n+}\r\n+\r\n+/**\r\n+ * Set a new random block\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_set_new_block(ReactionGameState* state) {\r\n+    // Clear current block\r\n+    setButtonColor(state->activeX, state->activeY, CRGB::Black);\r\n+    \r\n+    // Set new random block, different from the current one\r\n+    int new_x = random(BUTTON_COLS);\r\n+    int new_y = random(BUTTON_ROWS);\r\n+    state->activeX = new_x;\r\n+    state->activeY = new_y;\r\n+    while (new_x == state->activeX) {\r\n+        new_x = random(NUM__\r\n+    }\r\n+    state->activeBlock = new_block;\r\n+    int newX = state->activeBlock / BUTTON_COLS;\r\n+    int newY = state->activeBlock % BUTTON_ROWS;\r\n+    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n+    setButtonColor(newX, newY, CRGB(random(255), random(255), random(255)));\r\n+    FastLED.show();\r\n+}\r\n+\r\n+/**\r\n+ * Update the reaction game state\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ */\r\n+void reaction_game_update(ReactionGameState* state) {\r\n+    if (!state->isGameActive) return;\r\n+\r\n+    // Check game over\r\n+    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n+        state->isGameActive = false;\r\n+        state->gameEndTime = millis(); // Record the time when the game ended\r\n+\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        \r\n+        // Display score\r\n+        // display_score(state->score, CRGB::Green);\r\n+        // Display average reaction in ms time on display\r\n+        // display.clearDisplay();\r\n+        char message[32];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // updateDisplay(message, 0, 1);\r\n+\r\n+        if (state->score > 0) {\r\n+            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n+        } else {\r\n+            sprintf(message, \"No Hits\");\r\n+        }\r\n+        // updateDisplay(message, 3, 1);\r\n+        \r\n+        while (millis() - state->gameEndTime < 5000) {\r\n+            // Wait for 5 seconds before returning to main menu\r\n+        }\r\n+        FastLED.clear();\r\n+        FastLED.show();\r\n+        // mainMenu();\r\n+        return;\r\n+    }\r\n+\r\n+    if (checkButton(state->activeBlock + 1)) {\r\n+        char message[16];\r\n+        sprintf(message, \"Score: %d\", state->score);\r\n+        // display.clearDisplay();\r\n+        // updateDisplay(message, 1, 2);\r\n+        state->score++;\r\n+        reaction_game_set_new_block(state);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Check if the reaction game is currently running\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return True if the game is active, false otherwise\r\n+ */\r\n+bool reaction_game_is_running(ReactionGameState* state) {\r\n+    return state->isGameActive;\r\n+}\r\n+\r\n+/**\r\n+ * Get the current score of the reaction game\r\n+ * @param state Pointer to the ReactionGameState struct\r\n+ * @return Current score\r\n+ */\r\n+int reaction_game_get_score(ReactionGameState* state) {\r\n+    return state->score;\r\n+}\r\n"
                }
            ],
            "date": 1740854484096,
            "name": "Commit-0",
            "content": "#include \"reactiongame.h\"\r\n#include \"matrix.h\"\r\n\r\nint GAME_DURATION = 15000;  // 15 seconds\r\n\r\n/**\r\n * Set the duration of the reaction game in milliseconds\r\n * @param state Pointer to the ReactionGameState struct\r\n * @param duration Duration in milliseconds\r\n */\r\nvoid reaction_game_set_duration(ReactionGameState* state, unsigned long duration) {\r\n    GAME_DURATION = duration;\r\n    display_score(GAME_DURATION / 1000, CRGB::YellowGreen);\r\n}\r\n\r\n/**\r\n * Initialize the reaction game state\r\n * @param state Pointer to the ReactionGameState struct\r\n */\r\nvoid reaction_game_init(ReactionGameState* state) {\r\n    state->score = 0;\r\n    state->gameStartTime = 0;\r\n    state->activeBlock = 0;\r\n    state->isGameActive = false;\r\n}\r\n\r\n/**\r\n * Start the reaction game\r\n * @param state Pointer to the ReactionGameState struct\r\n */\r\nvoid reaction_game_start(ReactionGameState* state) {\r\n    // Set game duration until 5 pressed. 8 and 2 to increase/decrease duration\r\n    reaction_game_set_duration(state, GAME_DURATION);\r\n    while (!checkButton(5)) {\r\n        if (checkButton(8)) {\r\n            GAME_DURATION += 1000;\r\n            reaction_game_set_duration(state, GAME_DURATION);\r\n        } else if (checkButton(2)) {\r\n            if (GAME_DURATION > 1000) GAME_DURATION -= 1000;\r\n            reaction_game_set_duration(state, GAME_DURATION);\r\n        }\r\n        // format string with duration\r\n        display.clearDisplay();\r\n        updateDisplay(\"Reaction Game\", 0, 1);\r\n        char message[16];\r\n        sprintf(message, \"Duration: %d\", GAME_DURATION / 1000);\r\n        updateDisplay(message, 3, 1);\r\n    }\r\n    FastLED.clear();\r\n\r\n    state->score = 0;\r\n    state->gameStartTime = millis();\r\n    state->isGameActive = true;\r\n    reaction_game_set_new_block(state);\r\n}\r\n\r\n/**\r\n * Set a new random block\r\n * @param state Pointer to the ReactionGameState struct\r\n */\r\nvoid reaction_game_set_new_block(ReactionGameState* state) {\r\n    // Clear current block\r\n    int oldX = state->activeBlock / 3;\r\n    int oldY = state->activeBlock % 3;\r\n    setBlockColor(oldX, oldY, CRGB::Black);\r\n    \r\n    // Set new random block, different from the current one\r\n    int new_block = random(9);\r\n    while (new_block == state->activeBlock) {\r\n        new_block = random(9);\r\n    }\r\n    state->activeBlock = new_block;\r\n    int newX = state->activeBlock / 3;\r\n    int newY = state->activeBlock % 3;\r\n    // setBlockColor_3(newX, newY, BLOCK_COLOR);\r\n    setBlockColor_3(newX, newY, CRGB(random(255), random(255), random(255)));\r\n    FastLED.show();\r\n}\r\n\r\n/**\r\n * Update the reaction game state\r\n * @param state Pointer to the ReactionGameState struct\r\n */\r\nvoid reaction_game_update(ReactionGameState* state) {\r\n    if (!state->isGameActive) return;\r\n\r\n    // Check game over\r\n    if (millis() - state->gameStartTime >= GAME_DURATION) {\r\n        state->isGameActive = false;\r\n        state->gameEndTime = millis(); // Record the time when the game ended\r\n\r\n        FastLED.clear();\r\n        FastLED.show();\r\n        \r\n        // Display score\r\n        display_score(state->score, CRGB::Green);\r\n        // Display average reaction in ms time on display\r\n        display.clearDisplay();\r\n        char message[32];\r\n        sprintf(message, \"Score: %d\", state->score);\r\n        updateDisplay(message, 0, 1);\r\n\r\n        if (state->score > 0) {\r\n            sprintf(message, \"Avg Time: %d ms\", GAME_DURATION / state->score);\r\n        } else {\r\n            sprintf(message, \"No Hits\");\r\n        }\r\n        updateDisplay(message, 3, 1);\r\n        \r\n        while (millis() - state->gameEndTime < 5000) {\r\n            // Wait for 5 seconds before returning to main menu\r\n        }\r\n        FastLED.clear();\r\n        FastLED.show();\r\n        // mainMenu();\r\n        return;\r\n    }\r\n\r\n    if (checkButton(state->activeBlock + 1)) {\r\n        char message[16];\r\n        sprintf(message, \"Score: %d\", state->score);\r\n        display.clearDisplay();\r\n        updateDisplay(message, 1, 2);\r\n        state->score++;\r\n        reaction_game_set_new_block(state);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if the reaction game is currently running\r\n * @param state Pointer to the ReactionGameState struct\r\n * @return True if the game is active, false otherwise\r\n */\r\nbool reaction_game_is_running(ReactionGameState* state) {\r\n    return state->isGameActive;\r\n}\r\n\r\n/**\r\n * Get the current score of the reaction game\r\n * @param state Pointer to the ReactionGameState struct\r\n * @return Current score\r\n */\r\nint reaction_game_get_score(ReactionGameState* state) {\r\n    return state->score;\r\n}\r\n"
        }
    ]
}